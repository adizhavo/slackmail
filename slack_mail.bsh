#!/bin/bash

# Check internet connection
if ping -c 1 google.com >> /dev/null 2>&1; then
  echo "Internet connection detected"
else
  echo "Internet connection not detected, will exit"
  exit 1
fi

gmail_mess="https://www.googleapis.com/gmail/v1/users/me/messages"

function read_messages() {
  access_token=$(cat ./resources/token.json | jq -r '.access_token')
  request="$gmail_mess?access_token=$access_token&includeSpamTrash=false&q=in:inbox%20is:unread"
  response=$(curl -s $request)

  # Check if access token has expired
  if echo $response | jq -e 'has("error")' >/dev/null; then
    # Request a new access token
    gmail_url="https://www.googleapis.com/oauth2/v4/token"
    refresh_token=$(cat ./resources/token.json | jq -r '.refresh_token')
    form_data="refresh_token=$refresh_token&client_id=$client_id&client_secret=$client_secret&grant_type=refresh_token"
    r_response=$(curl -s --data $form_data $gmail_url)
    access_token=$(echo $r_response | jq '.access_token')
    token_type=$(echo $r_response | jq '.token_type')
    expires_in=$(echo $r_response | jq '.expires_in')
    token_file='{"access_token":'$access_token',"token_type":'$token_type',"expires_in":'$expires_in',"refresh_token": "'$refresh_token'"}'
    echo $token_file > ./resources/token.json
    echo $(read_messages)
  else
    # Return the messages id
    echo $response | jq -r '.messages | .[].id'
  fi
}

# Function for checking if the email notification was sent
function has_notified() {
  for u in $unread
  do if [ $1 = $u ]; then
     echo true
  fi done
  echo false
}

# Function for sending and formatting the slack post
function slack_post() {
  access_token=$(cat ./resources/token.json | jq -r '.access_token')
  request="$gmail_mess/$1?access_token=$access_token&format=minimal"
  snippet=$(curl -s $request | jq '.snippet')

  # Send the snippet to slack
  json='{"text":"You received a new email",
  "attachments":[{"text":'$snippet',
  "fallback": "Something went wrong, cannot display the email"},
  {"text":"Read here: https://mail.google.com/mail/inbox/'$1'"}]}'
  curl -s -X POST -H 'Content-type: application/json' --data "$json" $slack
}

# Read the config json
client_id=$(cat config.json | jq -r '.client_id')
client_secret=$(cat config.json | jq -r '.client_secret')
slack=$(cat config.json | jq -r '.slack_hook')

echo "Loaded config with client_id: $client_id"
echo "client_secret: $client_secret"
echo "slack hook: $slack"

# Load the previous unread emails
touch "./resources/unread_m.json" || { echo "Cannot write to file" >&2; exit 1;}
unread=$(cat ./resources/unread_m.json | jq -r ".messages[]")

# Try to send the email on slack
messages=$(read_messages)
for mess in $messages
do if ! $(has_notified $mess) ; then
  slack_post $mess
fi done

# Save the current unread message for the next check
unread="{\"messages\":["
for m in $messages
do
  unread+="\"$m\","
done
unread+="\"EOF\"]}"
echo $unread > ./resources/unread_m.json
